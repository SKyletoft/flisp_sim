use std::io;
use tui::{
	backend::CrosstermBackend,
	layout::{Constraint, Direction, Layout},
	text::{Span, Spans},
	widgets::{Block, Borders, Paragraph, Wrap},
};
use tui::{layout::Rect, Terminal};

const MEM_SLICE: [u8; 256] = [
	0x02, 0x03, 0x05, 0x07, 0x0B, 0x0D, 0x11, 0x13, 0x17, 0x1D, 0x1F, 0x25, 0x29, 0x2B, 0x2F, 0x35,
	0x3B, 0x3D, 0x43, 0x47, 0x49, 0x4F, 0x53, 0x59, 0x61, 0x65, 0x67, 0x6B, 0x6D, 0x71, 0x7F, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x0E, 0x1E,
	0x35, 0x3F, 0xF1, 0x3F, 0xA7, 0x3D, 0x2D, 0x17, 0x91, 0x00, 0xFA, 0x10, 0xF2, 0x02, 0x34, 0x8A,
	0xBE, 0x01, 0xE1, 0x3E, 0x05, 0xA7, 0x3E, 0x25, 0x02, 0x05, 0x43, 0x37, 0x3F, 0x33, 0x42, 0xF0,
	0xFF, 0x43, 0xF0, 0x05, 0x10, 0xF2, 0x00, 0x97, 0x05, 0x2F, 0x1C, 0x10, 0x34, 0x40, 0xBE, 0x01,
	0x09, 0x24, 0x0C, 0xF0, 0x00, 0xA6, 0x3D, 0x10, 0x15, 0xF2, 0x00, 0xE3, 0x00, 0x37, 0x3D, 0xF0,
	0x02, 0xB6, 0x00, 0xE2, 0x00, 0x33, 0x65, 0xBE, 0x01, 0x43, 0x10, 0xF0, 0x00, 0xE2, 0xFF, 0x14,
	0xB7, 0x01, 0x2D, 0x01, 0x43, 0xB4, 0x01, 0x47, 0xFE, 0x33, 0x90, 0x92, 0xFB, 0x34, 0x62, 0x33,
	0x9F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x7F, 0x50, 0x71, 0x6E, 0x1E, 0x81, 0x9F, 0x00, 0x00, 0x00, 0x00, 0x9B,
];

fn format_line(slice: &[u8]) -> String {
	format!("{:02X} {:02X} {:02X} {:02X} {:02X} {:02X} {:02X} {:02X} {:02X} {:02X} {:02X} {:02X} {:02X} {:02X} {:02X} {:02X}\n",
	slice[0],
	slice[1],
	slice[2],
	slice[3],
	slice[4],
	slice[5],
	slice[6],
	slice[7],
	slice[8],
	slice[9],
	slice[10],
	slice[11],
	slice[12],
	slice[13],
	slice[14],
	slice[15],
	)
}

fn main() -> Result<(), io::Error> {
	let stdout = io::stdout();
	let backend = CrosstermBackend::new(stdout);
	let mut terminal = Terminal::new(backend)?;

	loop {
		terminal.draw(|f| {
			let chunks = Layout::default()
				.direction(Direction::Horizontal)
				.margin(1)
				.constraints(
					[
						Constraint::Min(3 * 16 + 1),
						Constraint::Percentage(50),
						Constraint::Percentage(30),
					]
					.as_ref(),
				)
				.split(f.size());
			let block = Block::default().title("Block 2").borders(Borders::ALL);
			let string_lines = (0..16)
				.map(|idx| &MEM_SLICE[idx * 16..(idx + 1) * 16])
				.map(format_line)
				.collect::<Vec<_>>();
			let lines = Spans::from(
				string_lines
					.iter()
					.map(|line| Span::from(line.as_str()))
					.collect::<Vec<_>>(),
			);
			let paragraph =
				Paragraph::new(lines).block(Block::default().title("Memory").borders(Borders::ALL));
			f.render_widget(paragraph, chunks[0]);
			f.render_widget(block, chunks[1]);
		})?;
	}

	Ok(())
}
